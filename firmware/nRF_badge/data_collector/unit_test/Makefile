#TODO: Clean it up
#
# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.


#GTest Assert/Expect: https://github.com/google/googletest/blob/master/googletest/docs/primer.md or http://cheezyworld.com/wp-content/uploads/2010/12/PlainGoogleQuickTestReferenceGuide1.pdf




# Where to find firmware code.
FIRMWARE_DIR = ..

# Where to find test code.
TEST_DIR = tests

# Where to find mocking code.
MOCK_DIR = mock/incl

# Where the builded files will be stored to.
BUILD_DIR = _build
BUILD_C_DIR = $(BUILD_DIR)/C
BUILD_CC_DIR = $(BUILD_DIR)/CC

LCOV_DIR = $(BUILD_DIR)/LCOV

# The tinybuf directories
TINYBUF_PATH := ../tinybuf
TINYBUF_SRC_PATH := $(TINYBUF_PATH)/incl


SDK_PATH := $(NRF_SDK_PATH)/nRF5_SDK_12.3.0_d7731ad

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = googletest


# If you want no cmd-line print outs of the cmds
NO_ECHO := @

#function for removing duplicates in a list
remduplicates = $(strip $(if $1,$(firstword $1) $(call remduplicates,$(filter-out $(firstword $1),$1))))

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = flash_lib_mock_unittest \
		eeprom_lib_mock_unittest \
		storage1_lib_unittest \
		storage2_lib_unittest \
		storage_lib_unittest \
		filesystem_lib_unittest \
		timer_lib_unittest \
		app_timer_mock_unittest \
		app_scheduler_mock_unittest \
		callback_generator_lib_unittest \
		data_generator_lib_unittest \
		accel_lib_mock_unittest \
		chunk_fifo_lib_unittest \
		ble_lib_mock_unittest \
		circular_fifo_lib_unittest \
		timeout_lib_unittest \
		scan_integration_unittest \
				
FIRMWARE_SRCS = $(FIRMWARE_DIR)/incl/storage1_lib.c \
				$(FIRMWARE_DIR)/incl/storage2_lib.c \
				$(FIRMWARE_DIR)/incl/storage_lib.c \
				$(FIRMWARE_DIR)/incl/filesystem_lib.c \
				$(FIRMWARE_DIR)/incl/chunk_fifo_lib.c \
				$(FIRMWARE_DIR)/incl/systick_lib.c \
				$(FIRMWARE_DIR)/incl/circular_fifo_lib.c \
				$(FIRMWARE_DIR)/incl/timeout_lib.c \
				$(SDK_PATH)/components/libraries/fifo/app_fifo.c \
				$(FIRMWARE_DIR)/incl/sender_lib.c \
				$(FIRMWARE_DIR)/incl/request_handler_lib_01v1.c \
				$(FIRMWARE_DIR)/incl/request_handler_lib_02v1.c \
				$(FIRMWARE_DIR)/incl/protocol_messages_01v1.c \
				$(FIRMWARE_DIR)/incl/protocol_messages_02v1.c \
				$(FIRMWARE_DIR)/incl/common_messages.c \
				$(FIRMWARE_DIR)/incl/chunk_messages.c \
				$(FIRMWARE_DIR)/incl/stream_messages.c \
				$(FIRMWARE_DIR)/incl/storer_lib.c \
				$(FIRMWARE_DIR)/incl/advertiser_lib.c \
				$(FIRMWARE_DIR)/incl/scanner_lib.c \
				$(FIRMWARE_DIR)/incl/sampling_lib.c \
				$(FIRMWARE_DIR)/incl/processing_lib.c \
				

				







FIRMWARE_INC_PATH += -I$(FIRMWARE_DIR)/incl
FIRMWARE_INC_PATH += -I$(FIRMWARE_DIR)/config
FIRMWARE_INC_PATH += -I$(SDK_PATH)/components/libraries/util				
FIRMWARE_INC_PATH += -I$(SDK_PATH)/components/drivers_nrf/nrf_soc_nosd
FIRMWARE_INC_PATH += -I$(SDK_PATH)/components/device			
FIRMWARE_INC_PATH += -I$(SDK_PATH)/components/libraries/timer
FIRMWARE_INC_PATH += -I$(SDK_PATH)/components/libraries/scheduler
FIRMWARE_INC_PATH += -I$(SDK_PATH)/components/libraries/fifo
FIRMWARE_INC_PATH += -I$(SDK_PATH)/components/softdevice/s130/headers



#FIRMWARE_INC_PATH += -I$(FIRMWARE_DIR)/incl
#FIRMWARE_INC_PATH += -I$(FIRMWARE_DIR)/config
#FIRMWARE_INC_PATH += -I$(SDK_PATH)/components/libraries/util					--> For sdk_errors.h		
#FIRMWARE_INC_PATH += -I$(SDK_PATH)/components/drivers_nrf/nrf_soc_nosd			--> For nrf_error.h	
#FIRMWARE_INC_PATH += -I$(SDK_PATH)/components/device							--> For compiler_abstractions.h
#FIRMWARE_INC_PATH += -I$(SDK_PATH)/components/libraries/timer					--> For app_timer.h
#FIRMWARE_INC_PATH += -I$(SDK_PATH)/components/libraries/scheduler				--> For app_scheduler.h


MOCK_INC_PATH += -I$(MOCK_DIR)

TINYBUF_INC_PATH += -I$(TINYBUF_SRC_PATH)







# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler (no Wextra, because warning in gtest..)
#CXXFLAGS += -g -Wall -Wextra -pthread
CXXFLAGS += -g -Wall -pthread



# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

#target for printing all targets
help:
	@echo
	@echo "The following targets are available:"
	@echo "  - Info:            help  helpDetailed"
	@echo
	@echo "  - Compile options:  "
	@echo "                     NRF51DK   badge_03   badge_03_noDebug"
	@echo "                     badge_03v2_rigado   badge_03v2_dynastream"
	@echo "                     badge_03v2_rigado_noDebug	badge_03v2_rigado_tester"
	@echo "                     badge_03v4	 badge_03v4_noDebug   badge_03v4_tester"
	@echo "                     badge_03v6	 badge_03v6_noDebug   badge_03v6_tester"
	@echo
	@echo "  - Compile tests: "
	@$(foreach test,$(TESTS),echo "                     ${test}";)
	@echo "                     all (compiles all the above tests)"

	@echo
	@echo "  - Run tests (after compilation):"
	@$(foreach run_test,$(RUN_TESTS),echo "                     ${run_test}";)
	@echo "                     run_all (runs all the above tests)"
	@echo 
	@echo "  - LCOV:            Enable with LCOV=TRUE as make parameter (for compiling and running tests)"
	@echo
	
	
helpDetailed:
	@echo
	@echo "The following targets are available:"
	@echo "   - NRF51DK:            compile for NRF51 devkit board."
	@echo "   - badge_03:           compile for Badge 03 board (square blue badge)"
	@echo "   - badge_03_noDebug:   compile for Badge 03, UART disabled"
	@echo " -----"
	@echo "   - badge_03v2_[rigado|dynastream]:  compile for Badge 03v2"
	@echo "                           (with corresponding BLE module)"
	@echo "   - badge_03v2_rigado_noDebug:  compile for Badge 03v2, UART disabled"
	@echo "   - badge_03v2_rigado_tester:   compile 03v2 Rigado self tester"
	@echo " -----"
	@echo "   - badge_03v4:         compile for Badge 03v4 board"
	@echo "   - badge_03v4_noDebug: compile for Badge 03v4 board, UART disabled"
	@echo "   - badge_03v4_tester:  compile for Badge 03v4 board, UART disabled"
	@echo " -----"
	@echo "   - badge_03v46:        compile for Badge 03v6 board"
	@echo "   - badge_03v6_noDebug: compile for Badge 03v6 board, UART disabled"
	@echo "   - badge_03v6_tester:  compile for Badge 03v6 board, UART disabled"
	@echo " -----"
	@echo







#======= Target-dependent compiler flags
NRF51DK: CFLAGS += -DBOARD_PCA10028

badge_03: CFLAGS += -DBOARD_CUSTOM
badge_03: CFLAGS += -DBOARD_BADGE_03
badge_03_noDebug: CFLAGS += -DBOARD_CUSTOM
badge_03_noDebug: CFLAGS += -DBOARD_BADGE_03

badge_03v2_rigado: CFLAGS += -DBOARD_CUSTOM
badge_03v2_rigado: CFLAGS += -DBOARD_BADGE_03V2_RIGADO
badge_03v2_rigado_noDebug: CFLAGS += -DBOARD_CUSTOM
badge_03v2_rigado_noDebug: CFLAGS += -DBOARD_BADGE_03V2_RIGADO
badge_03v2_rigado_tester: CFLAGS += -DBOARD_CUSTOM
badge_03v2_rigado_tester: CFLAGS += -DBOARD_BADGE_03V2_RIGADO
badge_03v2_rigado_tester: CFLAGS += -DTESTER_ENABLE #enables tester mode
badge_03v2_dynastream: CFLAGS += -DBOARD_CUSTOM
badge_03v2_dynastream: CFLAGS += -DBOARD_BADGE_03V2_DYNASTREAM

badge_03v4: CFLAGS += -DBOARD_CUSTOM
badge_03v4: CFLAGS += -DBOARD_BADGE_03V4
badge_03v4_noDebug: CFLAGS += -DBOARD_CUSTOM
badge_03v4_noDebug: CFLAGS += -DBOARD_BADGE_03V4
badge_03v4_tester: CFLAGS += -DBOARD_CUSTOM
badge_03v4_tester: CFLAGS += -DBOARD_BADGE_03V4
badge_03v4_tester: CFLAGS += -DTESTER_ENABLE #enables tester mode

badge_03v6: CFLAGS += -DBOARD_CUSTOM
badge_03v6: CFLAGS += -DBOARD_BADGE_03V6 			#Cambiar a DBOARD_BADGE_03V6
badge_03v6_noDebug: CFLAGS += -DBOARD_CUSTOM
badge_03v6_noDebug: CFLAGS += -DBOARD_BADGE_03V6
badge_03v6_tester: CFLAGS += -DBOARD_CUSTOM
badge_03v6_tester: CFLAGS += -DBOARD_BADGE_03V6
badge_03v6_tester: CFLAGS += -DTESTER_ENABLE #enables tester mode


CFLAGS += -DDEBUG_LOG_ENABLE    #enable UART debug logger
badge_03_noDebug: CFLAGS += -UDEBUG_LOG_ENABLE    #disable if noDebug target specified
badge_03v2_rigado_noDebug: CFLAGS += -UDEBUG_LOG_ENABLE
badge_03v4_noDebug: CFLAGS += -UDEBUG_LOG_ENABLE
badge_03v6_noDebug: CFLAGS += -UDEBUG_LOG_ENABLE

CFLAGS += -DSOFTDEVICE_PRESENT
CFLAGS += -DNRF51
CFLAGS += -DNRF51822	

CFLAGS += -Wall -Werror
# keep every function in separate section. This will allow linker to dump unused functions
#CFLAGS += -ffunction-sections -fdata-sections -fno-strict-aliasing
#CFLAGS += -fno-builtin --short-enums


# Add the CFLAGS to the CXXFLAGS
CXXFLAGS += $(CFLAGS)
CXXFLAGS += -DUNIT_TEST
CXXFLAGS += -DDEBUG_LOG_ENABLE
CXXFLAGS += -DPROTOCOL_02v1



#$(info LCOV=${LCOV}. To enable LCOV, call make with parameter LCOV=TRUE.)

TESTS_OBJECTS_CC = $(addprefix $(BUILD_CC_DIR)/, $(addsuffix .o, $(TESTS)))
TESTS_FILES_CC_PATH = $(addsuffix .cc, $(addprefix $(TEST_DIR)/, $(TESTS)))
#$(info TESTS_FILES=${TESTS_FILES})

MOCK_SRCS += $(shell find $(MOCK_DIR) -name '*.c*')
MOCK_FILES_C = $(notdir $(shell find $(MOCK_DIR) -name '*.c'))
MOCK_FILES_CC = $(notdir $(shell find $(MOCK_DIR) -name '*.cc'))
MOCK_OBJECTS_C += $(addprefix $(BUILD_C_DIR)/,$(MOCK_FILES_C:.c=.o))
MOCK_OBJECTS_CC += $(addprefix $(BUILD_CC_DIR)/,$(MOCK_FILES_CC:.cc=.o))
MOCK_FILES_C_PATH += $(addprefix $(MOCK_DIR)/, $(MOCK_FILES_C))
MOCK_FILES_CC_PATH += $(addprefix $(MOCK_DIR)/, $(MOCK_FILES_CC))
#$(info MOCK_FILES_PATH=${MOCK_FILES_PATH})

FIRMWARE_FILES = $(notdir $(FIRMWARE_SRCS))
FIRMWARE_OBJECTS_C += $(addprefix $(BUILD_C_DIR)/,$(FIRMWARE_FILES:.c=.o))
FIRMWARE_FILES_C_PATH += $(FIRMWARE_SRCS)
#$(info FIRMWARE_FILES_PATH=${FIRMWARE_FILES_PATH})

TINYBUF_FILES = $(notdir $(wildcard $(TINYBUF_SRC_PATH)/*.c))
TINYBUF_OBJECTS_C += $(addprefix $(BUILD_C_DIR)/,$(TINYBUF_FILES:.c=.o))
TINYBUF_FILES_C_PATH +=  $(addprefix $(TINYBUF_SRC_PATH)/,$(TINYBUF_FILES))
#$(info TINYBUF_FILES_PATH=${TINYBUF_FILES_PATH})
#$(info TINYBUF_FILES=${TINYBUF_FILES})
#$(info TINYBUF_OBJECTS=${TINYBUF_OBJECTS})



C_OBJECTS = $(MOCK_OBJECTS_C) $(FIRMWARE_OBJECTS_C) $(TINYBUF_OBJECTS_C)
CC_OBJECTS = $(MOCK_OBJECTS_CC)
SRC_FILES_C_PATHS += $(call remduplicates, $(dir $(MOCK_FILES_C_PATH) ) )
SRC_FILES_C_PATHS += $(call remduplicates, $(dir $(FIRMWARE_FILES_C_PATH) ) )
SRC_FILES_C_PATHS += $(call remduplicates, $(dir $(TINYBUF_FILES_C_PATH) ) )
SRC_FILES_CC_PATHS += $(call remduplicates, $(dir $(TESTS_FILES_CC_PATH) ) )
SRC_FILES_CC_PATHS += $(call remduplicates, $(dir $(MOCK_FILES_CC_PATH) ) )

#$(info C_OBJECTS=${C_OBJECTS})
#$(info CC_OBJECTS=${CC_OBJECTS})
#$(info SRC_FILES_C_PATHS=${SRC_FILES_C_PATHS})
#$(info SRC_FILES_CC_PATHS=${SRC_FILES_CC_PATHS})

vpath %.c $(SRC_FILES_C_PATHS)
vpath %.cc $(SRC_FILES_CC_PATHS)


RUN_TESTS = $(addprefix run_, $(TESTS))



all : $(TESTS)
	

clean :
	$(NO_ECHO)rm -f $(addprefix $(BUILD_DIR)/, $(addprefix run_, $(TESTS))) gtest.a gtest_main.a *.o *.gcda *.gcno *.gcov *.info
	$(NO_ECHO)rm -f -r $(BUILD_DIR)
	$(NO_ECHO)mkdir $(BUILD_DIR)
	$(NO_ECHO)mkdir $(BUILD_C_DIR)
	$(NO_ECHO)mkdir $(BUILD_CC_DIR)
	$(NO_ECHO)rm -f -r $(LCOV_DIR)
	$(NO_ECHO)mkdir $(LCOV_DIR)
	

# Target for running all unit tests
run_all : $(RUN_TESTS)

# Make the run_..-targets Phony.
.PHONY: $(RUN_TESTS)

THIS_FILE := $(lastword $(MAKEFILE_LIST))

# Target for running one specific unit test
$(RUN_TESTS) :
ifeq ($(LCOV), TRUE) 
	$(NO_ECHO)cp -f $(LCOV_DIR)/*.gcno .
endif
	@echo 
	@echo ====================================================================
	@echo Run test: $@
	@echo ====================================================================
	$(NO_ECHO)(cd $(BUILD_DIR)/ ;	./$@)
	@echo ====================================================================
ifeq ($(LCOV), TRUE) 
	@echo Creating LCOV data and removing zero called files...
# https://stackoverflow.com/questions/5377297/how-to-manually-call-another-target-from-a-make-target/5378242?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa
# Call the lcov_genhtml-target with parameter LCOV_DIR_CUR
	$(NO_ECHO)-mv $(BUILD_DIR)/*.gcda . 2>/dev/null || :
	$(NO_ECHO)-mv $(BUILD_C_DIR)/*.gcda . 2>/dev/null || :
	$(NO_ECHO)-mv $(BUILD_CC_DIR)/*.gcda . 2>/dev/null || :
	$(NO_ECHO)$(MAKE) -f $(THIS_FILE) lcov_genhtml LCOV_DIR_CUR=$(LCOV_DIR)/$@ > /dev/null
else

# Remove all the gcda-files
	$(NO_ECHO)rm -f $(BUILD_DIR)/*.gcda $(BUILD_C_DIR)/*.gcda $(BUILD_CC_DIR)/*.gcda ./*.gcda
endif



print_lcov_help:
ifeq ($(LCOV), TRUE)
else
	@echo To enable LCOV, call make with parameter LCOV=TRUE.
endif

	
#Adding coverage information flags to compiler	
lcov_flags :
ifeq ($(LCOV), TRUE)
	@echo Compiling with lcov/gcov flags..
	$(eval CXXFLAGS += -fprofile-arcs -ftest-coverage)
endif

# Generating the 
lcov_genhtml :
ifeq ($(LCOV), TRUE)
	@echo Generating LCOV HTML file...
	gcov $(TESTS) 2> /dev/null
	rm -f -r $(LCOV_DIR_CUR)
	mkdir $(LCOV_DIR_CUR)

	lcov -c -d . -o $(LCOV_DIR_CUR)/coverage.info 2> /dev/null
	lcov --remove $(LCOV_DIR_CUR)/coverage.info "/usr*" "*googletest*" "*_build*" "*callback_generator_lib.*" "*data_generator_lib.*" -o $(LCOV_DIR_CUR)/coverage.info 2> /dev/null
	
## Call the lcov_remove_zero_called-target with parameter LCOV_DIR_CUR
	$(NO_ECHO)$(MAKE) -f $(THIS_FILE) lcov_remove_zero_called LCOV_DIR_CUR=$(LCOV_DIR_CUR) > /dev/null
#	genhtml $(LCOV_DIR_CUR)/coverage.info -o $(LCOV_DIR_CUR) --prefix=/app/firmware/nRF_badge/data_collector > /dev/null 
	genhtml $(LCOV_DIR_CUR)/coverage.info -o $(LCOV_DIR_CUR) --prefix=/opt/nrf/sdk/nrf_sdk_12_3/nrf5_12.3.0_d7731ad/nRF5_SDK_12.3.0_d7731ad > /dev/null 
## Delete the gcda and gcno data again
	rm -f *.gcda *.gcno
endif



# https://github.com/s-oravec/quilt/wiki/LCOV-Trace-File
lcov_remove_zero_called :
ifeq ($(LCOV), TRUE)
	@echo Removing zero called files...
	$(NO_ECHO)cp $(LCOV_DIR_CUR)/coverage.info $(LCOV_DIR_CUR)/coverage.info.tmp
	@while read line; \
	do \
		case "$$line" in \
		*SF:*) \
			cur_src_file="$${line#*:}";;\
		*FNH:0*) \
			echo "$$cur_src_file";\
			lcov --remove $(LCOV_DIR_CUR)/coverage.info "$$cur_src_file" -o $(LCOV_DIR_CUR)/coverage.info;; \
		esac \
	done <$(LCOV_DIR_CUR)/coverage.info.tmp
	$(NO_ECHO)rm -f $(LCOV_DIR_CUR)/coverage.info.tmp
endif	


# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
$(BUILD_DIR)/gtest-all.o : $(GTEST_SRCS_)
	$(NO_ECHO)$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -o $(BUILD_DIR)/gtest-all.o -c \
            $(GTEST_DIR)/src/gtest-all.cc

$(BUILD_DIR)/gtest_main.o : $(GTEST_SRCS_)
	$(NO_ECHO)$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -o $(BUILD_DIR)/gtest_main.o  -c \
            $(GTEST_DIR)/src/gtest_main.cc

$(BUILD_DIR)/gtest.a : $(BUILD_DIR)/gtest-all.o
	$(NO_ECHO)$(AR) $(ARFLAGS) $@ $^

$(BUILD_DIR)/gtest_main.a : $(BUILD_DIR)/gtest-all.o $(BUILD_DIR)/gtest_main.o
	$(NO_ECHO)$(AR) $(ARFLAGS) $@ $^
	
	
	
	

	
	
	
	
#==============================  Board option rules  ===================================
print_info: print_lcov_help
#	@echo "You can run tests with \"make [${RUN_TESTS}]\" or \"make run_all\""


	

compile: clean lcov_flags print_info

NRF51DK: compile

badge_03: compile
badge_03_noDebug: compile

badge_03v2_rigado: compile
badge_03v2_rigado_noDebug: compile
badge_03v2_rigado_tester: compile
badge_03v2_dynastream: compile

badge_03v4: compile
badge_03v4_noDebug: compile
badge_03v4_tester: compile

badge_03v6: compile
badge_03v6_noDebug: compile
badge_03v6_tester: compile


$(BUILD_C_DIR)/%.o : %.c
	@echo Compiling $(notdir $@)
	$(NO_ECHO) $(CXX) $(CPPFLAGS) $(TINYBUF_INC_PATH) $(MOCK_INC_PATH) $(FIRMWARE_INC_PATH) $(CXXFLAGS) -o $@ -c $<

$(BUILD_CC_DIR)/%.o : %.cc
	@echo Compiling $(notdir $@)
	$(NO_ECHO) $(CXX) $(CPPFLAGS) $(TINYBUF_INC_PATH) $(MOCK_INC_PATH) $(FIRMWARE_INC_PATH) $(CXXFLAGS) -o $@ -c $<


# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

$(TESTS_OBJECTS_CC): $(C_OBJECTS) $(CC_OBJECTS)
	@echo Compiling $(notdir $@)
	$(NO_ECHO)$(CXX) $(CPPFLAGS) $(TINYBUF_INC_PATH) $(MOCK_INC_PATH) $(FIRMWARE_INC_PATH) $(CXXFLAGS) -o $@ -c $(TEST_DIR)/$(basename $(notdir $@)).cc

#https://stackoverflow.com/questions/16262344/pass-a-target-name-to-dependency-list-in-makefile
$(TESTS): % : $(BUILD_DIR)/gtest_main.a $(BUILD_CC_DIR)/%.o 
	@echo Linking $(notdir $@)
#	$(NO_ECHO)-mv $(BUILD_DIR)/*.o $(BUILD_DIR)/*.a . 2>/dev/null || :
	$(NO_ECHO)$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(TINYBUF_INC_PATH) $(MOCK_INC_PATH) $(FIRMWARE_INC_PATH) -lpthread $(BUILD_CC_DIR)/$@.o $(C_OBJECTS) $(CC_OBJECTS) $(BUILD_DIR)/gtest_main.a -o $(BUILD_DIR)/run_$@ -lrt
#	$(NO_ECHO)-mv *.o *.a $(BUILD_DIR) 2>/dev/null || :
ifeq ($(LCOV), TRUE)
#move .gcno files (only if exist) and don't raise an error
	$(NO_ECHO)-mv $(BUILD_DIR)/*.gcno $(LCOV_DIR) 2>/dev/null || :
	$(NO_ECHO)-mv $(BUILD_C_DIR)/*.gcno $(LCOV_DIR) 2>/dev/null || :
	$(NO_ECHO)-mv $(BUILD_CC_DIR)/*.gcno $(LCOV_DIR) 2>/dev/null || :
endif


