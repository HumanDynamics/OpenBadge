# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.





# Where to find firmware code.
FIRMWARE_DIR = ..

# Where to find test code.
TEST_DIR = tests

# Where to find mocking code.
MOCK_DIR = mock

# Where the builded files will be stored to.
BUILD_DIRECTORY = _build

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = googletest

# If you want no cmd-line print outs of the cmds
NO_ECHO := @

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = sample1_unittest \

FIRMWARE_SRCS = $(FIRMWARE_DIR)/incl/sample1.c \
#$(FIRMWARE_DIR)/incl/




SDK_PATH := $(NRF_SDK_PATH)/nRF5_SDK_12.3.0_d7731ad

FIRMWARE_INC_PATH += -I$(FIRMWARE_DIR)/incl
FIRMWARE_INC_PATH += -I$(FIRMWARE_DIR)/config
FIRMWARE_INC_PATH += -I$(SDK_PATH)/components/libraries/util				
FIRMWARE_INC_PATH += -I$(SDK_PATH)/components/drivers_nrf/nrf_soc_nosd



#FIRMWARE_INC_PATH += -I$(FIRMWARE_DIR)/incl
#FIRMWARE_INC_PATH += -I$(FIRMWARE_DIR)/config
#FIRMWARE_INC_PATH += -I$(SDK_PATH)/components/libraries/util					--> For sdk_errors.h		
#FIRMWARE_INC_PATH += -I$(SDK_PATH)/components/drivers_nrf/nrf_soc_nosd			--> For nrf_error.h	



MOCK_INC_PATH += -I$(MOCK_DIR)/incl













# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler (no Wextra, because warning in gtest..)
#CXXFLAGS += -g -Wall -Wextra -pthread
CXXFLAGS += -g -Wall -pthread



# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.


#target for printing all targets
help:
	@echo
	@echo "The following targets are available:"
	@echo "  - Boards/options:  NRF51DK   badge_03   badge_03_noDebug"
	@echo "                     badge_03v2_rigado   badge_03v2_dynastream"
	@echo "                     badge_03v2_rigado_noDebug	badge_03v2_rigado_tester"
	@echo "                     badge_03v4	 badge_03v4_noDebug   badge_03v4_tester"
	@echo "                     badge_03v6	 badge_03v6_noDebug   badge_03v6_tester"
	@echo "  - Actions:         flashUnlock  flashErase  flashS130  flashAPP"
	@echo "  - Info:            help  helpDetailed"
	@echo

helpDetailed:
	@echo
	@echo "The following targets are available:"
	@echo "   - NRF51DK:            compile for NRF51 devkit board."
	@echo "   - badge_03:           compile for Badge 03 board (square blue badge)"
	@echo "   - badge_03_noDebug:   compile for Badge 03, UART disabled"
	@echo " -----"
	@echo "   - badge_03v2_[rigado|dynastream]:  compile for Badge 03v2"
	@echo "                           (with corresponding BLE module)"
	@echo "   - badge_03v2_rigado_noDebug:  compile for Badge 03v2, UART disabled"
	@echo "   - badge_03v2_rigado_tester:   compile 03v2 Rigado self tester"
	@echo " -----"
	@echo "   - badge_03v4:         compile for Badge 03v4 board"
	@echo "   - badge_03v4_noDebug: compile for Badge 03v4 board, UART disabled"
	@echo "   - badge_03v4_tester:  compile for Badge 03v4 board, UART disabled"
	@echo " -----"
	@echo "   - badge_03v46:        compile for Badge 03v6 board"
	@echo "   - badge_03v6_noDebug: compile for Badge 03v6 board, UART disabled"
	@echo "   - badge_03v6_tester:  compile for Badge 03v6 board, UART disabled"
	@echo " -----"
	@echo "   - flashUnlock:        set flags required to enable erasing/programming of flash"
	@echo "                           (only required for brand new NRF51 chips)"
	@echo "   - flashErase:         erase all flash (including softdevice)"
	@echo "   - flashS130:          flash S130 (BLE simultaneous central/peripheral) softdevice"
	@echo "   - flashAPP:           flash the badge firmware (after the softdevice)"
	@echo







#======= Target-dependent compiler flags
NRF51DK: CFLAGS += -DBOARD_PCA10028

badge_03: CFLAGS += -DBOARD_CUSTOM
badge_03: CFLAGS += -DBOARD_BADGE_03
badge_03_noDebug: CFLAGS += -DBOARD_CUSTOM
badge_03_noDebug: CFLAGS += -DBOARD_BADGE_03

badge_03v2_rigado: CFLAGS += -DBOARD_CUSTOM
badge_03v2_rigado: CFLAGS += -DBOARD_BADGE_03V2_RIGADO
badge_03v2_rigado_noDebug: CFLAGS += -DBOARD_CUSTOM
badge_03v2_rigado_noDebug: CFLAGS += -DBOARD_BADGE_03V2_RIGADO
badge_03v2_rigado_tester: CFLAGS += -DBOARD_CUSTOM
badge_03v2_rigado_tester: CFLAGS += -DBOARD_BADGE_03V2_RIGADO
badge_03v2_rigado_tester: CFLAGS += -DTESTER_ENABLE #enables tester mode
badge_03v2_dynastream: CFLAGS += -DBOARD_CUSTOM
badge_03v2_dynastream: CFLAGS += -DBOARD_BADGE_03V2_DYNASTREAM

badge_03v4: CFLAGS += -DBOARD_CUSTOM
badge_03v4: CFLAGS += -DBOARD_BADGE_03V4
badge_03v4_noDebug: CFLAGS += -DBOARD_CUSTOM
badge_03v4_noDebug: CFLAGS += -DBOARD_BADGE_03V4
badge_03v4_tester: CFLAGS += -DBOARD_CUSTOM
badge_03v4_tester: CFLAGS += -DBOARD_BADGE_03V4
badge_03v4_tester: CFLAGS += -DTESTER_ENABLE #enables tester mode

badge_03v6: CFLAGS += -DBOARD_CUSTOM
badge_03v6: CFLAGS += -DBOARD_BADGE_03V6 			#Cambiar a DBOARD_BADGE_03V6
badge_03v6_noDebug: CFLAGS += -DBOARD_CUSTOM
badge_03v6_noDebug: CFLAGS += -DBOARD_BADGE_03V6
badge_03v6_tester: CFLAGS += -DBOARD_CUSTOM
badge_03v6_tester: CFLAGS += -DBOARD_BADGE_03V6
badge_03v6_tester: CFLAGS += -DTESTER_ENABLE #enables tester mode


CFLAGS += -DDEBUG_LOG_ENABLE    #enable UART debug logger
badge_03_noDebug: CFLAGS += -UDEBUG_LOG_ENABLE    #disable if noDebug target specified
badge_03v2_rigado_noDebug: CFLAGS += -UDEBUG_LOG_ENABLE
badge_03v4_noDebug: CFLAGS += -UDEBUG_LOG_ENABLE
badge_03v6_noDebug: CFLAGS += -UDEBUG_LOG_ENABLE

#CFLAGS += --std=gnu99
CFLAGS += -Wall -Werror -O3
# keep every function in separate section. This will allow linker to dump unused functions
CFLAGS += -ffunction-sections -fdata-sections -fno-strict-aliasing
CFLAGS += -fno-builtin --short-enums


# Add the CFLAGS to the CXXFLAGS
CXXFLAGS += $(CFLAGS)




TESTS_OBJECTS = $(addsuffix .o, $(TESTS))
TESTS_SRCS = $(addsuffix .cc, $(addprefix $(TEST_DIR)/, $(TESTS)))
$(info $$(TESTS_OBJECTS) is [${TESTS_OBJECTS}])
$(info $$(TESTS_SRCS) is [${TESTS_SRCS}])

MOCK_SRCS = $(shell find $(MOCK_DIR) -name '*.c*')

FIRMWARE_FILES = $(notdir $(FIRMWARE_SRCS))
FIRMWARE_OBJECTS += $(FIRMWARE_FILES:.c=.o)
$(info $$(FIRMWARE_OBJECTS) is [${FIRMWARE_OBJECTS}])





all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(NO_ECHO)$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(NO_ECHO)$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(NO_ECHO)$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(NO_ECHO)$(AR) $(ARFLAGS) $@ $^
	
	
	
	
	

	
	
	
	
#==============================  Board option rules  ===================================

NRF51DK: clean all

badge_03: clean all
badge_03_noDebug: clean all

badge_03v2_rigado: clean all
badge_03v2_rigado_noDebug: clean all
badge_03v2_rigado_tester: clean all
badge_03v2_dynastream: clean all

badge_03v4: clean all
badge_03v4_noDebug: clean all
badge_03v4_tester: clean all

badge_03v6: clean all
badge_03v6_noDebug: clean all
badge_03v6_tester: clean all







	
# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

$(TESTS_OBJECTS):
	$(NO_ECHO)$(CXX) $(CPPFLAGS) $(MOCK_INC_PATH) $(FIRMWARE_INC_PATH) $(CXXFLAGS) -c $(TESTS_SRCS)

$(FIRMWARE_OBJECTS): $(TESTS_OBJECTS)
	$(NO_ECHO)$(CXX) $(CPPFLAGS) $(MOCK_INC_PATH) $(FIRMWARE_INC_PATH) $(CXXFLAGS) -c $(FIRMWARE_SRCS)

$(TESTS): $(FIRMWARE_OBJECTS) gtest_main.a
	$(NO_ECHO)$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(MOCK_SRCS) $(MOCK_INC_PATH) $(FIRMWARE_INC_PATH) -lpthread $(TESTS_OBJECTS) $(FIRMWARE_OBJECTS) gtest_main.a -o $(BUILD_DIRECTORY)/$@
	$(NO_ECHO)rm -f $(TESTS) gtest.a gtest_main.a *.o